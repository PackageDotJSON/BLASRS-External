const DB_QUERIES = {
  FETCH_SUBMISSIONS: `SELECT COMPANY_NAME, UPLOAD_ID, SUBMITTED_WHEN, PERIOD_ENDED FROM CRS.BLASRS_DATA_SUBMITTER2 
  WHERE USER_ID_FK =:valueCnic AND COMPANY_INCNO =:valueCuin ORDER BY SUBMITTED_WHEN DESC`,
  AUTH_USER: `SELECT USER_COMPANY.SIGNATORY_ALLOWED, USER_COMPANY.COMPANY_ID, USER_COMPANY.COMPANY_NAME FROM 
  ESUSER.USER_COMPANY INNER JOIN ESUSER.USER_PIN_HISTORY ON 
  USER_COMPANY.USER_ID_FK = USER_PIN_HISTORY.USER_ID_FK WHERE USER_COMPANY.USER_ID_FK = ? AND 
  USER_COMPANY.COMPANY_INCNO = ? AND USER_PIN_HISTORY.USER_PIN = ?`,
  INSERT_FILE: `INSERT INTO CRS.BLASRS_DATA_SUBMITTER2(ROW_ID, USER_ID_FK, USER_PIN, RECORD_TYPE, COMPANY_ID, COMPANY_NAME, 
  COMPANY_INCNO, SUBMITTED_BY, UPLOAD_ID, RECORD_COUNT, PERIOD_ENDED, UPLOAD_FILE) VALUES (BLASRS_DATA_SUBMITTER2_SEQ.nextval, 
  :userId, :userPin, :recordType, :companyId, :companyName, :companyIncno, :submittedBy, BLASRS_DATA_SUBMITTER2_SEQ.nextval, 
  :recordCountNum, :periodEnded, :blobData)`,
  INSERT_FILE_DATA: `INSERT INTO CRS.BLASRS_DATA2(ROW_ID, USER_ID_FK, COMPANY_ID, COMPANY_NAME, COMPANY_INCNO, INPUT_SOURCE, 
  CREATED_BY, DATA_COMPLETE, UPLOAD_ID, DESCRIPTION, DEBIT_AMOUNT, CREDIT_AMOUNT, SECONDARY_CODES) VALUES 
  (BLASRS_DATA2_SEQ.nextval, :userId, :companyId, :companyName, :companyIncno, 'Excel', :createdBy, 'Submitted', 
  BLASRS_DATA2_SEQ.nextval, :description, :debitAmount, :creditAmount, :secondaryCodes)`,
};

module.exports = DB_QUERIES;
