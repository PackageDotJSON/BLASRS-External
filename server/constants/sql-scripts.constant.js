const DB_QUERIES = {
  FETCH_SUBMISSIONS: `SELECT BLASRS_DATA_SUBMITTER.COMPANY_NAME, BLASRS_DATA_SUBMITTER.UPLOAD_ID, 
  BLASRS_DATA_SUBMITTER.SUBMITTED_WHEN, BLASRS_DATA_SUBMITTER.PERIOD_ENDED, BLASRS_FLAG.IS_EMPTY_FLAG
  FROM CRS.BLASRS_DATA_SUBMITTER 
  INNER JOIN CRS.BLASRS_FLAG ON BLASRS_DATA_SUBMITTER.UPLOAD_ID = BLASRS_FLAG.UPLOAD_ID
  WHERE BLASRS_DATA_SUBMITTER.COMPANY_INCNO =:valueCuin 
  ORDER BY BLASRS_DATA_SUBMITTER.SUBMITTED_WHEN DESC`,
  AUTH_USER: `SELECT USER_COMPANY.COMPANY_ID as "companyId", USER_COMPANY.COMPANY_NAME as "companyName"
  FROM ESUSER.USER_COMPANY 
  INNER JOIN ESUSER.USER_PROFILE ON USER_COMPANY.USER_ID_FK = USER_PROFILE.USER_ID
  INNER JOIN ICM_COMPANY ON USER_COMPANY.COMPANY_ID = ICM_COMPANY.CMPNYID
  WHERE ESUSER.USER_PROFILE.USER_STATUS = 'ACTIVE' AND ESUSER.USER_COMPANY.LOGIN_ALLOWED = 'YES' AND USER_COMPANY.USER_ID_FK = ?
  AND ICM_COMPANY.STTS !='INACTIVE'
  AND ICM_COMPANY.CMPNYINCNO = ?
  AND DECRYPT_CHAR(USER_PROFILE.PASSWORD, ?) = ?
  FOR FETCH ONLY WITH UR`,
  AUTH_BROKER: `SELECT * FROM CRS.BROKERS_LIST
  WHERE BROKER_CUIN = :userCuin`,
  AUTH_PIN_CODE: `SELECT * FROM USER_PROFILE WHERE USER_ID = ? AND USER_PIN = ? FOR FETCH ONLY WITH UR`,
  GET_PERIOD_ENDED_DATE: `SELECT TO_CHAR(MAX(ADD_MONTHS(TO_DATE((PERIOD_ENDED) ,'DD/MM/YYYY'), 1)),  'DD/MM/YYYY') 
  FROM CRS.BLASRS_DATA_SUBMITTER WHERE COMPANY_INCNO = :companyIncno`,
  VERIFY_UPLOAD_ID: `SELECT * FROM CRS.BLASRS_DATA_SUBMITTER WHERE `,
  INSERT_FILE: `INSERT INTO CRS.BLASRS_DATA_SUBMITTER(ROW_ID, USER_ID_FK, USER_PIN, RECORD_TYPE, COMPANY_ID, COMPANY_NAME, 
  COMPANY_INCNO, SUBMITTED_BY, UPLOAD_ID, RECORD_COUNT, PERIOD_ENDED, UPLOAD_FILE) VALUES (BLASRS_ROW_ID.nextval, 
  :userId, :userPin, :recordType, :companyId, :companyName, :companyIncno, :submittedBy, SEQ_UPLOAD.nextval, 
  :recordCountNum, :periodEnded, :blobData) RETURNING UPLOAD_ID INTO :uploadId`,
  INSERT_FILE_DATA: `INSERT INTO CRS.BLASRS_DATA(ROW_ID, USER_ID_FK, COMPANY_ID, COMPANY_NAME, COMPANY_INCNO, INPUT_SOURCE, 
  CREATED_BY, DATA_COMPLETE, UPLOAD_ID, DESCRIPTION, DEBIT_AMOUNT, CREDIT_AMOUNT, SECONDARY_CODES) VALUES 
  (SEQ_UPLOAD.currval, :userId, :companyId, :companyName, :companyIncno, 'Excel', :createdBy, 'Submitted', 
  :uploadId, :description, :debitAmount, :creditAmount, :secondaryCodes)`,
  INSERT_FLAG_DATA: `INSERT INTO CRS.BLASRS_FLAG(UPLOAD_ID, IS_EMPTY_FLAG) VALUES(:uploadId, :isEmptyFlag)`,
  GET_FILE: `SELECT UPLOAD_FILE FROM CRS.BLASRS_DATA_SUBMITTER WHERE UPLOAD_ID = :uploadId AND COMPANY_INCNO = :cuin`,
  INSERT_LOG: `INSERT INTO CRS.BLASRS_LOGGING(ID, IP_ADDRESS, BROKER_CUIN) VALUES (BLASRS_LOGGING_SEQ.nextval, :userIp, :brokerCuin)`,
  DATA_TRANSFORMATION_DEBIT_AMOUNT: `UPDATE BLASRS_DATA
  SET DEBIT_AMOUNT = (DEBIT_AMOUNT) * -1
  WHERE SECONDARY_CODES IN (SELECT SECONDARY_CODES
  FROM BLASRS_SECONDARY_CODES_NATURE2
  WHERE NATURE = 'Credit')
  AND UPLOAD_ID = :uploadId`,
  DATA_TRANSFORMATION_CREDIT_AMOUNT: `UPDATE BLASRS_DATA
  SET CREDIT_AMOUNT = (CREDIT_AMOUNT) * -1
  WHERE SECONDARY_CODES IN (SELECT SECONDARY_CODES
  FROM BLASRS_SECONDARY_CODES_NATURE2
  WHERE NATURE = 'Debit')
  AND UPLOAD_ID = :uploadId`,
};

module.exports = DB_QUERIES;
